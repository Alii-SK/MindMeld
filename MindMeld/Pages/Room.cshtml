@page "/room/{RoomId}/{PlayerId?}"
@model MindMeld.Pages.RoomModel
@{
    
}
<div class="mb-4 text-center fixed top-4 right-4 z-10">
    <div class="text-[#00ffaa] mb-3">SHARE THE ROOM WITH YOUR FRIENDS</div>
    <button data-signals-copy-btn="false" data-on-click="$copyBtn = 'true'; setTimeout(() => $copyBtn = 'false', 2000); copyRoomLink()"
            class="bg-transparent border-2 border-[#00ffaa] text-[#00ffaa] px-4 py-2 text-sm hover:bg-[#00ffaa] hover:text-black transition">
        COPY ROOM LINK
    </button>
    <div data-show="$copyBtn=='true'" id="copy-feedback" class="text-sm text-green-400 mt-1">Link copied!</div>
</div>

<div id="player-list" data-on-load="@@get('/api/players/@Model.RoomId')" class="mb-4 text-center fixed top-4 left-4 z-10">

</div>


<div class="w-full max-w-xl pixel-box pixel-fade-in" data-signals-player-count="1" id="home-screen">
    <h1 class="text-xl text-center mb-8">MIND MELD</h1>
    <div class="flex gap-4 mb-6">
        <input name="word"
               placeholder="Enter a word"
               data-bind="input"
               class="bg-black text-[#00ffaa] border-4 border-[#00ffaa] p-2 w-full text-xs focus:outline-none" />
        <button type="submit"
                data-attr-disabled="$playerCount<=1"
                data-class-opacity-50="$playerCount<=1"
                data-class-cursor-not-allowed="$playerCount<=1"
                data-class-hover:bg-[#00ddaa]="$playerCount<=1"
                class="bg-[#00ffaa] text-black border-4 border-black px-4 py-2 text-xs hover:bg-[#00ddaa] transition">
            SUBMIT
        </button>
    </div>



    <div id="host-control" data-on-load="@@get('/api/check-host/@Model.RoomId/@Model.PlayerId'); initializeSignalR();"
         class="text-sm p-4">
    </div>
</div>
<script src="https://unpkg.com/@@microsoft/signalr@latest/dist/browser/signalr.min.js"></script>
<script>
    const roomId = '@Model.RoomId';
    const playerId = '@Model.PlayerId';
    const playerName = '@Model.PlayerName';
    function copyRoomLink() {

       const roomLink = `${window.location.origin}/lobby/${roomId}`;

       navigator.clipboard.writeText(roomLink).catch(() => {
           // Fallback for older browsers
           const textArea = document.createElement('textarea');
           textArea.value = roomLink;
           document.body.appendChild(textArea);
           textArea.select();
           document.execCommand('copy');
           document.body.removeChild(textArea);
       });
    }
    async function initializeSignalR() {
        connection = new signalR.HubConnectionBuilder()
            .withUrl("/gameHub")
            .build();

        // Set up event handlers
        connection.on("PlayerJoined", (playerId, playerName) => {
            console.log(`Player ${playerName} joined`);
            
            addPlayer(playerId, playerName)
        });

        connection.on("PlayerLeft", (playerId) => {
            console.log(`Player ${playerId} left`);
            removePlayer(playerId)
        });

        connection.on("GameStateUpdate", (gameState) => {
            updateGameUI(gameState);
        });

        connection.on("GameStarted", (gameInfo) => {
            showGameArea();
            updateRoundInfo(gameInfo.currentRound);
            startTimer(gameInfo.timeRemaining);
        });

        connection.on("WordSubmitted", (playerId, word) => {
            addSubmission(playerId, word);
        });

        connection.on("RoundEnded", (results) => {
            showResults(results);
            if (results.gameState === "GameEnd") {
                showGameEnd(results);
            }
        });

        connection.on("NextRoundStarted", (gameInfo) => {
            hideResults();
            showGameArea();
            updateRoundInfo(gameInfo.currentRound);
            startTimer(gameInfo.timeRemaining);
            clearSubmissions();
        });

        // Start connection
        await connection.start();

        // Join room
        await connection.invoke("JoinRoom", roomId, playerId, playerName);
    }

    // Game functions
    function startGame() {
        if (isHost) {
            connection.invoke("StartGame", roomId, playerId);
        }
    }

    function submitWord() {
        const wordField = document.getElementById('word-field');
        const word = wordField.value.trim();

        if (word) {
            connection.invoke("SubmitWord", roomId, playerId, word);
            wordField.value = '';
            wordField.disabled = true;
        }
    }

    // Clean up when leaving page
    window.addEventListener('beforeunload', () => {
        if (connection) {
            connection.invoke("LeaveRoom", roomId, playerId);
            connection.stop();
        }
    });
    // Individual player management functions
    function addPlayer(playerId, playerName) {
        const container = document.querySelector('.fixed.top-4.left-4');

        // Check if player already exists
        if (document.getElementById(`player-${playerId}`)) {
            return;
        }
        const playerElement = document.createElement('div');
        playerElement.id = `player-${playerId}`;
        playerElement.className = 'mb-2 p-2 bg-black border border-[#00ffaa] text-[#00ffaa] text-sm';

        playerElement.innerHTML = `
            <div class="flex items-center justify-between">
                <span>${playerName}</span>
                <div class="ml-2">
                    <span>⏳</span>
                </div>
            </div>
        `;
        container.appendChild(playerElement);

        // Update player count
        updateSignals({
            playerCount: 2
        }, false);
    }
    function removePlayer(playerId) {
        const playerElement = document.getElementById(`player-${playerId}`);
        if (playerElement) {
            playerElement.remove();

            // Update player count
            const currentCount = window.ds.signals.playerCount || 0;
            window.ds.signals.totalPlayers = Math.max(0, currentCount - 1);
        }
    }
    function updatePlayerGuessStatus(playerId, hasGuessed) {
        const playerElement = document.getElementById(`player-${playerId}`);
        if (playerElement) {
            // Update the signal for this specific player element
            playerElement.setAttribute('data-signals-has-guessed', hasGuessed.toString());

            // Trigger Datastar to re-evaluate the element
            window.ds.signals[`player_${playerId}_guessed`] = hasGuessed;
        }
    }
    function updateSignals(signalsData, onlyIfMissing = false) {
        const event = new CustomEvent('datastar-patch-signals', {
            detail: {
                signals: signalsData,
                onlyIfMissing: onlyIfMissing
            }
        });
        document.dispatchEvent(event);
    }
</script>